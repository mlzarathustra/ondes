package ondes.synth.filter.iir;

import ondes.App;

import java.util.HashMap;

import static java.lang.System.err;

public class IIRSpecLib {

    public static final HashMap<String, IIRSpec>specMap = new HashMap<>();

    /**
     * <p>
     *     The current naming convention is
     *     "{type}_{order}_{freq}"
     *     Assuming a sample rate of 44100.
     * </p>
     * <p>
     *     So, "lp_6_15k" is a 6th-order low-pass filter
     *     at 15 kilohertz, at a sample rate of 44100.
     * </p>
     * <p>
     *     Used with a different sample rate, the frequency will
     *     shift accordingly, as shown in the below output from
     *     SampleRateConversion.main()
     * </p>
     * <pre>
     *     The MatLab convention: fs = sample rate. fc = cutoff frequency
     *     fs=44100.0 fc=[10,000.000 , 15,000.000 , 20,000.000 ]
     *     fs=48000.0 fc=[10,884.354 , 16,326.531 , 21,768.707 ]
     *     fs=96000.0 fc=[21,768.707 , 32,653.061 , 43,537.415 ]
     * </pre>
     * <p>
     *     It might be better to label them by the angular frequency
     *     (i.e. fc/(fs/2)) but then it's more difficult to tell
     *     what the continuous frequency would be.
     * </p>
     * <p>
     *     Of course, the best would be to just accept whatever
     *     values of (fc, fs) and do the Z-transform, but it will
     *     take some more research and study before I am up to
     *     coding that! :^)
     * </p>
     *
     *
     */
    public static final String[] specKeys = {
        //  6 pole
        //"lp_6_440",  // completely unstable.
        "lp_6_1k",     // becomes unstable easily
        "lp_6_2k",
        "lp_6_5k",
        "lp_6_10k",
        "lp_6_15k",
        "lp_6_20k",

        //  4 pole
        "lp_4_55",
        "lp_4_110",
        "lp_4_220",
        "lp_4_440",
        "lp_4_880",
        "lp_4_1000",
        "lp_4_1600",
        "lp_4_3200",
        "lp_4_4000",
        "lp_4_6400",
        "lp_4_8000",
        "lp_4_10k",
        "lp_4_15k",
        "lp_4_20k",

        "lp_1_22k",  // simple averaging filter.

    };

    /**
     * See notes/IIRCoefficients.groovy for the script that generated the below.
     * It includes the matlab calls that calculated the data.
     * For more, see https://www.mathworks.com/help/signal/ref/butter.html
     */
    public static final double[][][] specValues = {
        //
        //              6-pole
        //
        //
//        { // 440 - completely unstable
//            {1.00000, -5.75779, 13.81813, -17.69237, 12.74637, -4.89919, 0.78485},
//            {0.00000000084184, 0.00000000505105, 0.00000001262763, 0.00000001683684, 0.00000001262763, 0.00000000505105, 0.00000000084184}
//        },
        { // 1,000 - not recommended - becomes unstable easily
            {1.00000, -5.44961, 12.39746, -15.06844, 10.31945, -3.77519, 0.57633},
            {0.00000010023, 0.00000060141, 0.00000150351, 0.00000200469, 0.00000150351, 0.00000060141, 0.00000010023}
        },
        { // 2,000
            {1.00000, -4.89975, 10.08780, -11.15976, 6.99104, -2.34999, 0.33097},
            {0.0000050126, 0.0000300753, 0.0000751883, 0.0001002511, 0.0000751883, 0.0000300753, 0.0000050126}
        },
        { // 5,000
            {1.000000, -3.257599, 4.806147, -3.982222, 1.932197, -0.516327, 0.059061},
            {0.00064464, 0.00386786, 0.00966965, 0.01289287, 0.00966965, 0.00386786, 0.00064464}
        },
        { // 10,000
            {1.0000000, -0.5517678, 0.8913623, -0.2718709, 0.1442227, -0.0188095, 0.0023745},
            {0.018680, 0.112079, 0.280198, 0.373597, 0.280198, 0.112079, 0.018680}
        },
        { // 15,000
            {1.000000, 2.144005, 2.505855, 1.690254, 0.699779, 0.162362, 0.016504},
            {0.12842, 0.77051, 1.92627, 2.56836, 1.92627, 0.77051, 0.12842}
        },
        { // 20,000
            {1.00000, 4.87228, 9.97981, 10.98805, 6.85320, 2.29419, 0.32187},
            {0.56733, 3.40401, 8.51002, 11.34669, 8.51002, 3.40401, 0.56733}
        },

        //
        //              4-pole
        //
        //
        { // 55 hz
            {1.000000000000000, -3.979523120784081, 5.938778753232112, -3.938986892039906, 0.979731263324189},
            {0.000000000233270, 0.000000000933079, 0.000000001399618, 0.000000000933079, 0.000000000233270}
        },
        { // 110 hz
            {1.000000000000000, -3.959046394096639, 5.877975698013332, -3.878802239623409, 0.959872994819078},
            {0.000000003694523, 0.000000014778090, 0.000000022167135, 0.000000014778090, 0.000000003694523}
        },
        { // 220 hz
            {1.000000000000000, -3.918094007958425, 5.757619657148872, -3.760878173632512, 0.921353451295813},
            {0.000000057928359, 0.000000231713437, 0.000000347570155, 0.000000231713437, 0.000000057928359}
        },
        { // 440 hz
            {1.000000000000000, -3.836197759286915, 5.521875662687604, -3.534535819153113, 0.848872164149776},
            {0.000000890524834, 0.000003562099338, 0.000005343149007, 0.000003562099338, 0.000000890524834}
        },
        { // 880 hz
            {1.000000000000000, -3.672472999775108, 5.069993433448310, -3.117757406845823, 0.720447823771504},
            {0.000013178162430, 0.000052712649721, 0.000079068974581, 0.000052712649721, 0.000013178162430}
        },
        { // 1000 hz
            {1.000000000000000, -3.627844202190272, 4.951225133251029, -3.011924281505382, 0.688887685664050},
            {0.000021520951214, 0.000086083804856, 0.000129125707285, 0.000086083804856, 0.000021520951214}
        },
        { // 1600 hz
            {1.000000000000000, -3.404921297086087, 4.385491616873876, -2.528876415181696, 0.550344583498134},
            {0.000127405506514, 0.000509622026057, 0.000764433039086, 0.000509622026057, 0.000127405506514}
        },
        { // 3200 hz
            {1.000000000000000, -2.813247964295029, 3.094949841478490, -1.556391344184967, 0.300078280291924},
            {0.001586800830651, 0.006347203322605, 0.009520804983907, 0.006347203322605, 0.001586800830651}
        },
        { // 4000 hz
            {1.000000000000000, -2.519464502720457, 2.560837110296337, -1.206235366498159, 0.220129267711909},
            {0.003454156799352, 0.013816627197408, 0.020724940796112, 0.013816627197408, 0.003454156799352}
        },
        { // 6400 hz
            {1.000000000000000, -1.647789935090799, 1.356495036530671, -0.525348301637111, 0.083403391687097},
            {0.016672511968116, 0.066690047872464, 0.100035071808697, 0.066690047872464, 0.016672511968116}
        },
        { // 8000 hz
            {1.000000000000000, -1.074227806943300, 0.852962406902107, -0.273999800564306, 0.042262460787136},
            {0.034187328761352, 0.136749315045409, 0.205123972568113, 0.136749315045409, 0.034187328761352}
        },
        { // 10000 hz
            {1.000000000000000, -0.363164166894653, 0.527744224650765, -0.078016763944550, 0.020241407268473},
            {0.069175293817502, 0.276701175270009, 0.415051762905013, 0.276701175270009, 0.069175293817502}
        },
        { // 15000 hz
            {1.000000000000000, 1.414135963200621, 1.124729247797066, 0.409044880528264, 0.063373289877483},
            {0.250705211337715, 1.002820845350858, 1.504231268026287, 1.002820845350858, 0.250705211337715}
        },
        { // 20000 hz
            {1.000000000000000, 3.238042998428483, 3.991201750029149, 2.212720740163505, 0.464666599887257},
            {0.681664505531774, 2.726658022127098, 4.089987033190646, 2.726658022127098, 0.681664505531774}
        },


        //
        //              simple averaging
        //
        //
        {
            { 1.0, 1.0 }, { 1.0, 1.0 }
        }



    };

    static {
        if (specKeys.length != specValues.length) {
            err.println("IIRSpecLib - keys and values are of different length!");
            App.quitOnError();
        }
        for (int i=0; i<specKeys.length; ++i) {
            specMap.put(specKeys[i], new IIRSpec(specKeys[i], specValues[i]));
        }
    }
    public static IIRSpec get(String key) { return specMap.get(key); }


}
