/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ondes;

import ondes.midi.MlzMidi;

import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Transmitter;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Mixer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

import static java.lang.System.out;

import static java.util.stream.Collectors.toList;
import static ondes.mlz.Util.getResourceAsString;

public class App {

    static Mixer getMixer(String outDevStr) {
        Mixer.Info[] info= AudioSystem.getMixerInfo();
        List<Mixer.Info> list = Arrays.stream(info)
            .filter(i -> {
                String id=i.toString().toLowerCase();
                if (!id.contains(outDevStr))
                    return false;
                Mixer mixer=AudioSystem.getMixer(i);
                return mixer.getSourceLineInfo().length > 0;
            })
            .collect(toList());

        //out.println(list);
        if (list.isEmpty()) return null;

        return AudioSystem.getMixer(list.get(0));
    }

    static MidiDevice getMidiDev(String inDevStr) {
        MidiDevice.Info info = MlzMidi.getTransmitter(inDevStr);
        if (info == null) {
            out.println(
                "could not find midi transmitting device to match "
                    +inDevStr);
            System.exit(-1);
        }
        try {
            return MidiSystem.getMidiDevice(info);
        }
        catch (Exception ex) {
            out.println("attempting to open midi device "+inDevStr);
            out.println(ex);
            return null;
        }
    }



    static void usage() {
        out.println(getResourceAsString("usage.txt"));
        System.exit(0);
    }

    public static void main(String[] args) {
        // contains("") will match any
        String inDevStr = "", outDevStr = "";

        // one for each channel
        String[] progNames = new String[16];
        for (int i=0; i<16; ++i) progNames[i]="";

        if (args.length % 2 == 1) usage();

        for (int i=0; i<args.length; ++i) {
            switch(args[i]) {
                case "-in": inDevStr = args[++i]; continue;
                case "-out": outDevStr = args[++i]; continue;
                case "-all":
                    ++i;
                    for (int ch=0; ch<16; ch++) progNames[ch] = args[i];
                    continue;
            }
            if (args[i].startsWith("-ch")) {
                try {
                    progNames[ Integer.parseInt(args[i].substring(3)) - 1 ]
                        = args[++i];
                }
                catch (Exception ex) {
                    usage();
                }
            }
            else usage();
        }

        out.println("Input device : "+inDevStr);
        out.println("Output device: "+outDevStr);
        out.println("Program Names: "+Arrays.toString(progNames));

        MidiDevice midiDev = getMidiDev(inDevStr);
        if (midiDev == null) {
            out.println("Could not open MIDI input device "+inDevStr);
            out.println("say java -cp ondes-all.jar ondes.midi.MIDIInfo " +
                "to see a list of devices.");
            System.exit(-1);
        }
        out.println("Midi Input device   : "+midiDev.getDeviceInfo());
        Mixer mixer = getMixer(outDevStr);
        out.println("Mixer (audio output): "+mixer.getMixerInfo());

        //  run -in 828 -out main


    }
}
